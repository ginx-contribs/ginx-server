// Code generated by ent, DO NOT EDIT.

package cronjob

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ginx-contribs/ginx-server/server/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CronJob {
	return predicate.CronJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CronJob {
	return predicate.CronJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CronJob {
	return predicate.CronJob(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldName, v))
}

// Cron applies equality check predicate on the "cron" field. It's identical to CronEQ.
func Cron(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldCron, v))
}

// EntryID applies equality check predicate on the "entry_id" field. It's identical to EntryIDEQ.
func EntryID(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldEntryID, v))
}

// Prev applies equality check predicate on the "prev" field. It's identical to PrevEQ.
func Prev(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldPrev, v))
}

// Next applies equality check predicate on the "next" field. It's identical to NextEQ.
func Next(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldNext, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CronJob {
	return predicate.CronJob(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CronJob {
	return predicate.CronJob(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldContainsFold(FieldName, v))
}

// CronEQ applies the EQ predicate on the "cron" field.
func CronEQ(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldCron, v))
}

// CronNEQ applies the NEQ predicate on the "cron" field.
func CronNEQ(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldNEQ(FieldCron, v))
}

// CronIn applies the In predicate on the "cron" field.
func CronIn(vs ...string) predicate.CronJob {
	return predicate.CronJob(sql.FieldIn(FieldCron, vs...))
}

// CronNotIn applies the NotIn predicate on the "cron" field.
func CronNotIn(vs ...string) predicate.CronJob {
	return predicate.CronJob(sql.FieldNotIn(FieldCron, vs...))
}

// CronGT applies the GT predicate on the "cron" field.
func CronGT(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldGT(FieldCron, v))
}

// CronGTE applies the GTE predicate on the "cron" field.
func CronGTE(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldGTE(FieldCron, v))
}

// CronLT applies the LT predicate on the "cron" field.
func CronLT(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldLT(FieldCron, v))
}

// CronLTE applies the LTE predicate on the "cron" field.
func CronLTE(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldLTE(FieldCron, v))
}

// CronContains applies the Contains predicate on the "cron" field.
func CronContains(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldContains(FieldCron, v))
}

// CronHasPrefix applies the HasPrefix predicate on the "cron" field.
func CronHasPrefix(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldHasPrefix(FieldCron, v))
}

// CronHasSuffix applies the HasSuffix predicate on the "cron" field.
func CronHasSuffix(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldHasSuffix(FieldCron, v))
}

// CronEqualFold applies the EqualFold predicate on the "cron" field.
func CronEqualFold(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldEqualFold(FieldCron, v))
}

// CronContainsFold applies the ContainsFold predicate on the "cron" field.
func CronContainsFold(v string) predicate.CronJob {
	return predicate.CronJob(sql.FieldContainsFold(FieldCron, v))
}

// EntryIDEQ applies the EQ predicate on the "entry_id" field.
func EntryIDEQ(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldEntryID, v))
}

// EntryIDNEQ applies the NEQ predicate on the "entry_id" field.
func EntryIDNEQ(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldNEQ(FieldEntryID, v))
}

// EntryIDIn applies the In predicate on the "entry_id" field.
func EntryIDIn(vs ...int) predicate.CronJob {
	return predicate.CronJob(sql.FieldIn(FieldEntryID, vs...))
}

// EntryIDNotIn applies the NotIn predicate on the "entry_id" field.
func EntryIDNotIn(vs ...int) predicate.CronJob {
	return predicate.CronJob(sql.FieldNotIn(FieldEntryID, vs...))
}

// EntryIDGT applies the GT predicate on the "entry_id" field.
func EntryIDGT(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldGT(FieldEntryID, v))
}

// EntryIDGTE applies the GTE predicate on the "entry_id" field.
func EntryIDGTE(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldGTE(FieldEntryID, v))
}

// EntryIDLT applies the LT predicate on the "entry_id" field.
func EntryIDLT(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldLT(FieldEntryID, v))
}

// EntryIDLTE applies the LTE predicate on the "entry_id" field.
func EntryIDLTE(v int) predicate.CronJob {
	return predicate.CronJob(sql.FieldLTE(FieldEntryID, v))
}

// PrevEQ applies the EQ predicate on the "prev" field.
func PrevEQ(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldPrev, v))
}

// PrevNEQ applies the NEQ predicate on the "prev" field.
func PrevNEQ(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldNEQ(FieldPrev, v))
}

// PrevIn applies the In predicate on the "prev" field.
func PrevIn(vs ...int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldIn(FieldPrev, vs...))
}

// PrevNotIn applies the NotIn predicate on the "prev" field.
func PrevNotIn(vs ...int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldNotIn(FieldPrev, vs...))
}

// PrevGT applies the GT predicate on the "prev" field.
func PrevGT(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldGT(FieldPrev, v))
}

// PrevGTE applies the GTE predicate on the "prev" field.
func PrevGTE(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldGTE(FieldPrev, v))
}

// PrevLT applies the LT predicate on the "prev" field.
func PrevLT(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldLT(FieldPrev, v))
}

// PrevLTE applies the LTE predicate on the "prev" field.
func PrevLTE(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldLTE(FieldPrev, v))
}

// NextEQ applies the EQ predicate on the "next" field.
func NextEQ(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldEQ(FieldNext, v))
}

// NextNEQ applies the NEQ predicate on the "next" field.
func NextNEQ(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldNEQ(FieldNext, v))
}

// NextIn applies the In predicate on the "next" field.
func NextIn(vs ...int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldIn(FieldNext, vs...))
}

// NextNotIn applies the NotIn predicate on the "next" field.
func NextNotIn(vs ...int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldNotIn(FieldNext, vs...))
}

// NextGT applies the GT predicate on the "next" field.
func NextGT(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldGT(FieldNext, v))
}

// NextGTE applies the GTE predicate on the "next" field.
func NextGTE(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldGTE(FieldNext, v))
}

// NextLT applies the LT predicate on the "next" field.
func NextLT(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldLT(FieldNext, v))
}

// NextLTE applies the LTE predicate on the "next" field.
func NextLTE(v int64) predicate.CronJob {
	return predicate.CronJob(sql.FieldLTE(FieldNext, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CronJob) predicate.CronJob {
	return predicate.CronJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CronJob) predicate.CronJob {
	return predicate.CronJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CronJob) predicate.CronJob {
	return predicate.CronJob(sql.NotPredicates(p))
}
