// Code generated by ent, DO NOT EDIT.

package cronjob

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cronjob type in the database.
	Label = "cron_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCron holds the string denoting the cron field in the database.
	FieldCron = "cron"
	// FieldEntryID holds the string denoting the entry_id field in the database.
	FieldEntryID = "entry_id"
	// FieldPrev holds the string denoting the prev field in the database.
	FieldPrev = "prev"
	// FieldNext holds the string denoting the next field in the database.
	FieldNext = "next"
	// Table holds the table name of the cronjob in the database.
	Table = "cron_jobs"
)

// Columns holds all SQL columns for cronjob fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCron,
	FieldEntryID,
	FieldPrev,
	FieldNext,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CronJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCron orders the results by the cron field.
func ByCron(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCron, opts...).ToFunc()
}

// ByEntryID orders the results by the entry_id field.
func ByEntryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryID, opts...).ToFunc()
}

// ByPrev orders the results by the prev field.
func ByPrev(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrev, opts...).ToFunc()
}

// ByNext orders the results by the next field.
func ByNext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNext, opts...).ToFunc()
}
