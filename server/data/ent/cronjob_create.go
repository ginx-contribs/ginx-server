// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ginx-contribs/ginx-server/server/data/ent/cronjob"
)

// CronJobCreate is the builder for creating a CronJob entity.
type CronJobCreate struct {
	config
	mutation *CronJobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (cjc *CronJobCreate) SetName(s string) *CronJobCreate {
	cjc.mutation.SetName(s)
	return cjc
}

// SetCron sets the "cron" field.
func (cjc *CronJobCreate) SetCron(s string) *CronJobCreate {
	cjc.mutation.SetCron(s)
	return cjc
}

// SetEntryID sets the "entry_id" field.
func (cjc *CronJobCreate) SetEntryID(i int) *CronJobCreate {
	cjc.mutation.SetEntryID(i)
	return cjc
}

// SetPrev sets the "prev" field.
func (cjc *CronJobCreate) SetPrev(i int64) *CronJobCreate {
	cjc.mutation.SetPrev(i)
	return cjc
}

// SetNext sets the "next" field.
func (cjc *CronJobCreate) SetNext(i int64) *CronJobCreate {
	cjc.mutation.SetNext(i)
	return cjc
}

// Mutation returns the CronJobMutation object of the builder.
func (cjc *CronJobCreate) Mutation() *CronJobMutation {
	return cjc.mutation
}

// Save creates the CronJob in the database.
func (cjc *CronJobCreate) Save(ctx context.Context) (*CronJob, error) {
	return withHooks(ctx, cjc.sqlSave, cjc.mutation, cjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cjc *CronJobCreate) SaveX(ctx context.Context) *CronJob {
	v, err := cjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cjc *CronJobCreate) Exec(ctx context.Context) error {
	_, err := cjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjc *CronJobCreate) ExecX(ctx context.Context) {
	if err := cjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjc *CronJobCreate) check() error {
	if _, ok := cjc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CronJob.name"`)}
	}
	if _, ok := cjc.mutation.Cron(); !ok {
		return &ValidationError{Name: "cron", err: errors.New(`ent: missing required field "CronJob.cron"`)}
	}
	if _, ok := cjc.mutation.EntryID(); !ok {
		return &ValidationError{Name: "entry_id", err: errors.New(`ent: missing required field "CronJob.entry_id"`)}
	}
	if _, ok := cjc.mutation.Prev(); !ok {
		return &ValidationError{Name: "prev", err: errors.New(`ent: missing required field "CronJob.prev"`)}
	}
	if _, ok := cjc.mutation.Next(); !ok {
		return &ValidationError{Name: "next", err: errors.New(`ent: missing required field "CronJob.next"`)}
	}
	return nil
}

func (cjc *CronJobCreate) sqlSave(ctx context.Context) (*CronJob, error) {
	if err := cjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cjc.mutation.id = &_node.ID
	cjc.mutation.done = true
	return _node, nil
}

func (cjc *CronJobCreate) createSpec() (*CronJob, *sqlgraph.CreateSpec) {
	var (
		_node = &CronJob{config: cjc.config}
		_spec = sqlgraph.NewCreateSpec(cronjob.Table, sqlgraph.NewFieldSpec(cronjob.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cjc.conflict
	if value, ok := cjc.mutation.Name(); ok {
		_spec.SetField(cronjob.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cjc.mutation.Cron(); ok {
		_spec.SetField(cronjob.FieldCron, field.TypeString, value)
		_node.Cron = value
	}
	if value, ok := cjc.mutation.EntryID(); ok {
		_spec.SetField(cronjob.FieldEntryID, field.TypeInt, value)
		_node.EntryID = value
	}
	if value, ok := cjc.mutation.Prev(); ok {
		_spec.SetField(cronjob.FieldPrev, field.TypeInt64, value)
		_node.Prev = value
	}
	if value, ok := cjc.mutation.Next(); ok {
		_spec.SetField(cronjob.FieldNext, field.TypeInt64, value)
		_node.Next = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CronJob.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CronJobUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cjc *CronJobCreate) OnConflict(opts ...sql.ConflictOption) *CronJobUpsertOne {
	cjc.conflict = opts
	return &CronJobUpsertOne{
		create: cjc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CronJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cjc *CronJobCreate) OnConflictColumns(columns ...string) *CronJobUpsertOne {
	cjc.conflict = append(cjc.conflict, sql.ConflictColumns(columns...))
	return &CronJobUpsertOne{
		create: cjc,
	}
}

type (
	// CronJobUpsertOne is the builder for "upsert"-ing
	//  one CronJob node.
	CronJobUpsertOne struct {
		create *CronJobCreate
	}

	// CronJobUpsert is the "OnConflict" setter.
	CronJobUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *CronJobUpsert) SetName(v string) *CronJobUpsert {
	u.Set(cronjob.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CronJobUpsert) UpdateName() *CronJobUpsert {
	u.SetExcluded(cronjob.FieldName)
	return u
}

// SetCron sets the "cron" field.
func (u *CronJobUpsert) SetCron(v string) *CronJobUpsert {
	u.Set(cronjob.FieldCron, v)
	return u
}

// UpdateCron sets the "cron" field to the value that was provided on create.
func (u *CronJobUpsert) UpdateCron() *CronJobUpsert {
	u.SetExcluded(cronjob.FieldCron)
	return u
}

// SetEntryID sets the "entry_id" field.
func (u *CronJobUpsert) SetEntryID(v int) *CronJobUpsert {
	u.Set(cronjob.FieldEntryID, v)
	return u
}

// UpdateEntryID sets the "entry_id" field to the value that was provided on create.
func (u *CronJobUpsert) UpdateEntryID() *CronJobUpsert {
	u.SetExcluded(cronjob.FieldEntryID)
	return u
}

// AddEntryID adds v to the "entry_id" field.
func (u *CronJobUpsert) AddEntryID(v int) *CronJobUpsert {
	u.Add(cronjob.FieldEntryID, v)
	return u
}

// SetPrev sets the "prev" field.
func (u *CronJobUpsert) SetPrev(v int64) *CronJobUpsert {
	u.Set(cronjob.FieldPrev, v)
	return u
}

// UpdatePrev sets the "prev" field to the value that was provided on create.
func (u *CronJobUpsert) UpdatePrev() *CronJobUpsert {
	u.SetExcluded(cronjob.FieldPrev)
	return u
}

// AddPrev adds v to the "prev" field.
func (u *CronJobUpsert) AddPrev(v int64) *CronJobUpsert {
	u.Add(cronjob.FieldPrev, v)
	return u
}

// SetNext sets the "next" field.
func (u *CronJobUpsert) SetNext(v int64) *CronJobUpsert {
	u.Set(cronjob.FieldNext, v)
	return u
}

// UpdateNext sets the "next" field to the value that was provided on create.
func (u *CronJobUpsert) UpdateNext() *CronJobUpsert {
	u.SetExcluded(cronjob.FieldNext)
	return u
}

// AddNext adds v to the "next" field.
func (u *CronJobUpsert) AddNext(v int64) *CronJobUpsert {
	u.Add(cronjob.FieldNext, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CronJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CronJobUpsertOne) UpdateNewValues() *CronJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CronJob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CronJobUpsertOne) Ignore() *CronJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CronJobUpsertOne) DoNothing() *CronJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CronJobCreate.OnConflict
// documentation for more info.
func (u *CronJobUpsertOne) Update(set func(*CronJobUpsert)) *CronJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CronJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CronJobUpsertOne) SetName(v string) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CronJobUpsertOne) UpdateName() *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateName()
	})
}

// SetCron sets the "cron" field.
func (u *CronJobUpsertOne) SetCron(v string) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.SetCron(v)
	})
}

// UpdateCron sets the "cron" field to the value that was provided on create.
func (u *CronJobUpsertOne) UpdateCron() *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateCron()
	})
}

// SetEntryID sets the "entry_id" field.
func (u *CronJobUpsertOne) SetEntryID(v int) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.SetEntryID(v)
	})
}

// AddEntryID adds v to the "entry_id" field.
func (u *CronJobUpsertOne) AddEntryID(v int) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.AddEntryID(v)
	})
}

// UpdateEntryID sets the "entry_id" field to the value that was provided on create.
func (u *CronJobUpsertOne) UpdateEntryID() *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateEntryID()
	})
}

// SetPrev sets the "prev" field.
func (u *CronJobUpsertOne) SetPrev(v int64) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.SetPrev(v)
	})
}

// AddPrev adds v to the "prev" field.
func (u *CronJobUpsertOne) AddPrev(v int64) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.AddPrev(v)
	})
}

// UpdatePrev sets the "prev" field to the value that was provided on create.
func (u *CronJobUpsertOne) UpdatePrev() *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdatePrev()
	})
}

// SetNext sets the "next" field.
func (u *CronJobUpsertOne) SetNext(v int64) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.SetNext(v)
	})
}

// AddNext adds v to the "next" field.
func (u *CronJobUpsertOne) AddNext(v int64) *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.AddNext(v)
	})
}

// UpdateNext sets the "next" field to the value that was provided on create.
func (u *CronJobUpsertOne) UpdateNext() *CronJobUpsertOne {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateNext()
	})
}

// Exec executes the query.
func (u *CronJobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CronJobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CronJobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CronJobUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CronJobUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CronJobCreateBulk is the builder for creating many CronJob entities in bulk.
type CronJobCreateBulk struct {
	config
	err      error
	builders []*CronJobCreate
	conflict []sql.ConflictOption
}

// Save creates the CronJob entities in the database.
func (cjcb *CronJobCreateBulk) Save(ctx context.Context) ([]*CronJob, error) {
	if cjcb.err != nil {
		return nil, cjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cjcb.builders))
	nodes := make([]*CronJob, len(cjcb.builders))
	mutators := make([]Mutator, len(cjcb.builders))
	for i := range cjcb.builders {
		func(i int, root context.Context) {
			builder := cjcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CronJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cjcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cjcb *CronJobCreateBulk) SaveX(ctx context.Context) []*CronJob {
	v, err := cjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cjcb *CronJobCreateBulk) Exec(ctx context.Context) error {
	_, err := cjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjcb *CronJobCreateBulk) ExecX(ctx context.Context) {
	if err := cjcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CronJob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CronJobUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cjcb *CronJobCreateBulk) OnConflict(opts ...sql.ConflictOption) *CronJobUpsertBulk {
	cjcb.conflict = opts
	return &CronJobUpsertBulk{
		create: cjcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CronJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cjcb *CronJobCreateBulk) OnConflictColumns(columns ...string) *CronJobUpsertBulk {
	cjcb.conflict = append(cjcb.conflict, sql.ConflictColumns(columns...))
	return &CronJobUpsertBulk{
		create: cjcb,
	}
}

// CronJobUpsertBulk is the builder for "upsert"-ing
// a bulk of CronJob nodes.
type CronJobUpsertBulk struct {
	create *CronJobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CronJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CronJobUpsertBulk) UpdateNewValues() *CronJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CronJob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CronJobUpsertBulk) Ignore() *CronJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CronJobUpsertBulk) DoNothing() *CronJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CronJobCreateBulk.OnConflict
// documentation for more info.
func (u *CronJobUpsertBulk) Update(set func(*CronJobUpsert)) *CronJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CronJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CronJobUpsertBulk) SetName(v string) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CronJobUpsertBulk) UpdateName() *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateName()
	})
}

// SetCron sets the "cron" field.
func (u *CronJobUpsertBulk) SetCron(v string) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.SetCron(v)
	})
}

// UpdateCron sets the "cron" field to the value that was provided on create.
func (u *CronJobUpsertBulk) UpdateCron() *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateCron()
	})
}

// SetEntryID sets the "entry_id" field.
func (u *CronJobUpsertBulk) SetEntryID(v int) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.SetEntryID(v)
	})
}

// AddEntryID adds v to the "entry_id" field.
func (u *CronJobUpsertBulk) AddEntryID(v int) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.AddEntryID(v)
	})
}

// UpdateEntryID sets the "entry_id" field to the value that was provided on create.
func (u *CronJobUpsertBulk) UpdateEntryID() *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateEntryID()
	})
}

// SetPrev sets the "prev" field.
func (u *CronJobUpsertBulk) SetPrev(v int64) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.SetPrev(v)
	})
}

// AddPrev adds v to the "prev" field.
func (u *CronJobUpsertBulk) AddPrev(v int64) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.AddPrev(v)
	})
}

// UpdatePrev sets the "prev" field to the value that was provided on create.
func (u *CronJobUpsertBulk) UpdatePrev() *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdatePrev()
	})
}

// SetNext sets the "next" field.
func (u *CronJobUpsertBulk) SetNext(v int64) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.SetNext(v)
	})
}

// AddNext adds v to the "next" field.
func (u *CronJobUpsertBulk) AddNext(v int64) *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.AddNext(v)
	})
}

// UpdateNext sets the "next" field to the value that was provided on create.
func (u *CronJobUpsertBulk) UpdateNext() *CronJobUpsertBulk {
	return u.Update(func(s *CronJobUpsert) {
		s.UpdateNext()
	})
}

// Exec executes the query.
func (u *CronJobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CronJobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CronJobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CronJobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
