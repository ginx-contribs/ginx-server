// Package doc Code generated by swaggo/swag at 2024-10-13 21:04:06.805043 +0800 CST m=+0.517780301. DO NOT EDIT
package doc

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "ginxcontribs",
            "url": "https://github.com/ginx-contribs"
        },
        "license": {
            "name": "MIT LICENSE",
            "url": "https://mit-license.org/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/captcha": {
            "post": {
                "description": "send captcha code mail to specified email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Captcha",
                "parameters": [
                    {
                        "description": "CaptchaOption",
                        "name": "CaptchaOption",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CaptchaOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "login with password, and returns jwt token pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "LoginOptions",
                        "name": "LoginOptions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LoginOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/types.TokenResult"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "ask for refresh access TokenHandler lifetime with refresh TokenHandler",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh",
                "parameters": [
                    {
                        "description": "refresh params",
                        "name": "RefreshTokenOptions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RefreshTokenOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/types.TokenResult"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "register a new user with verification code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "register params",
                        "name": "RegisterOptions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RegisterOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/reset": {
            "post": {
                "description": "reset user password with verification code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "ResetPassword",
                "parameters": [
                    {
                        "description": "ResetOptions",
                        "name": "ResetOptions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ResetOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/health/ping": {
            "get": {
                "description": "ping test web service if is available",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/:uid": {
            "get": {
                "description": "get user information by given uid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/types.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "description": "return user information for current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/types.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "list user info by page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "List",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/types.UserSearchResult"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.CaptchaOption": {
            "type": "object",
            "required": [
                "usage"
            ],
            "properties": {
                "to": {
                    "description": "email receiver",
                    "type": "string"
                },
                "usage": {
                    "description": "verify code usage: 1-register 2-reset password",
                    "maximum": 2,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Usage"
                        }
                    ]
                }
            }
        },
        "types.LoginOptions": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "user password",
                    "type": "string"
                },
                "remember": {
                    "description": "remember user or not",
                    "type": "boolean"
                },
                "username": {
                    "description": "username or email",
                    "type": "string"
                }
            }
        },
        "types.RefreshTokenOptions": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "description": "access token",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "refresh token",
                    "type": "string"
                }
            }
        },
        "types.RegisterOptions": {
            "type": "object",
            "required": [
                "code",
                "password",
                "username"
            ],
            "properties": {
                "code": {
                    "description": "verification code from verify email",
                    "type": "string"
                },
                "email": {
                    "description": "user email address",
                    "type": "string"
                },
                "password": {
                    "description": "user password",
                    "type": "string"
                },
                "username": {
                    "description": "username must be alphanumeric",
                    "type": "string"
                }
            }
        },
        "types.ResetOptions": {
            "type": "object",
            "required": [
                "code",
                "password"
            ],
            "properties": {
                "code": {
                    "description": "verification code from verify email",
                    "type": "string"
                },
                "email": {
                    "description": "user email address",
                    "type": "string"
                },
                "password": {
                    "description": "new password",
                    "type": "string"
                }
            }
        },
        "types.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "error": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "types.TokenResult": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "types.Usage": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "UsageUnknown",
                "UsageRegister",
                "UsageReset"
            ]
        },
        "types.UserInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.UserSearchResult": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UserInfo"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v0.0.0-Dev",
	Host:             "",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "HTTP API",
	Description:      "This is http api swagger doc generated by swago.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
