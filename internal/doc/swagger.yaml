basePath: /api/
definitions:
  types.CaptchaOption:
    properties:
      to:
        description: email receiver
        type: string
      usage:
        allOf:
        - $ref: '#/definitions/types.Usage'
        description: 'verify code usage: 1-register 2-reset password'
        maximum: 2
        minimum: 1
    required:
    - usage
    type: object
  types.LoginOptions:
    properties:
      password:
        description: user password
        type: string
      remember:
        description: remember user or not
        type: boolean
      username:
        description: username or email
        type: string
    required:
    - password
    - username
    type: object
  types.RefreshTokenOptions:
    properties:
      accessToken:
        description: access token
        type: string
      refreshToken:
        description: refresh token
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  types.RegisterOptions:
    properties:
      code:
        description: verification code from verify email
        type: string
      email:
        description: user email address
        type: string
      password:
        description: user password
        type: string
      username:
        description: username must be alphanumeric
        type: string
    required:
    - code
    - password
    - username
    type: object
  types.ResetOptions:
    properties:
      code:
        description: verification code from verify email
        type: string
      email:
        description: user email address
        type: string
      password:
        description: new password
        type: string
    required:
    - code
    - password
    type: object
  types.Response:
    properties:
      code:
        type: integer
      data: {}
      error:
        type: string
      msg:
        type: string
    type: object
  types.TokenResult:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  types.Usage:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - UsageUnknown
    - UsageRegister
    - UsageReset
  types.UserInfo:
    properties:
      created_at:
        type: integer
      email:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
  types.UserSearchResult:
    properties:
      list:
        items:
          $ref: '#/definitions/types.UserInfo'
        type: array
      total:
        type: integer
    type: object
info:
  contact:
    name: ginxcontribs
    url: https://github.com/ginx-contribs
  description: This is http api swagger doc generated by swago.
  license:
    name: MIT LICENSE
    url: https://mit-license.org/
  title: HTTP API
  version: v0.0.0-Dev
paths:
  /auth/captcha:
    post:
      consumes:
      - application/json
      description: send captcha code mail to specified email address
      parameters:
      - description: CaptchaOption
        in: body
        name: CaptchaOption
        required: true
        schema:
          $ref: '#/definitions/types.CaptchaOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: Captcha
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: login with password, and returns jwt token pair
      parameters:
      - description: LoginOptions
        in: body
        name: LoginOptions
        required: true
        schema:
          $ref: '#/definitions/types.LoginOptions'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.TokenResult'
              type: object
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: ask for refresh access TokenHandler lifetime with refresh TokenHandler
      parameters:
      - description: refresh params
        in: body
        name: RefreshTokenOptions
        required: true
        schema:
          $ref: '#/definitions/types.RefreshTokenOptions'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.TokenResult'
              type: object
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register a new user with verification code
      parameters:
      - description: register params
        in: body
        name: RegisterOptions
        required: true
        schema:
          $ref: '#/definitions/types.RegisterOptions'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: Register
      tags:
      - auth
  /auth/reset:
    post:
      consumes:
      - application/json
      description: reset user password with verification code
      parameters:
      - description: ResetOptions
        in: body
        name: ResetOptions
        required: true
        schema:
          $ref: '#/definitions/types.ResetOptions'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: ResetPassword
      tags:
      - auth
  /health/ping:
    get:
      consumes:
      - application/json
      description: ping test web service if is available
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Ping
      tags:
      - system
  /user/:uid:
    get:
      consumes:
      - application/json
      description: get user information by given uid
      parameters:
      - description: uid
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.UserInfo'
              type: object
      summary: Info
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: return user information for current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.UserInfo'
              type: object
      summary: Profile
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: list user info by page
      parameters:
      - in: query
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.UserSearchResult'
              type: object
      summary: List
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
